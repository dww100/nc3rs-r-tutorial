{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to MkDocs\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n\n\n\nThis is a test\n\n\nTesting 1,2,3", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-mkdocs", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "Welcome to MkDocs"
        }, 
        {
            "location": "/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.", 
            "title": "Project layout"
        }, 
        {
            "location": "/#this-is-a-test", 
            "text": "Testing 1,2,3", 
            "title": "This is a test"
        }, 
        {
            "location": "/intro/", 
            "text": "First things first, open up R studio.\n\n\n\n\nYou should see something like the above; a window with the panes - a \nConsole\n with some introductory text and a blue \n prompt, an empty \nEnviroment\n and a \nFiles\n browser showing the contents of the current directory.\n\n\nLets play with some very basic commands.\nYou need to select the \nConsole\n window and type after the \n prompt (and type \nEnter\n after each one to execute the command).\n\n\nIn the rest of the text we will use the following conventions (which echo what you will see in your \nCommand\n window):\n\n  Commands will be shown with a preceding '\n' as a guide to what you should enter - you must \nnot\n type it in as part of the command.\n\n  The output expected from \nR\n will be preceded by a number in square brackets (for example \n[1]\n)\n\n\nBasic maths\n\n\nR\n can be used as a simple calculator.\nAs in many programming languages, multiply is \n*\n and divide is \n/\n.\n\n\nAddition\n\n\n 1 + 2\n\n[1] 3\n\n\n\n\nDivision\n\n\n 1 / 2\n\n\n[1] 0.5\n\n\n\n\nMultiplication\n\n\n 2 * 2\n\n[1] 4\n\n\n\n\nKeeping the results of calculations\n\n\nIf this was the only thing \nR\n could do it would be pretty useless.\nIt is very useful to to store the results of a command with a name so we can use it again later.\nIn programming this is called assigning a value in a \nvariable\n.\nIn \nR\n there are two commands to assign a value to a variable - \n-\n and \n=\n.\nTry the following:\n\n\nmy_result \n- 7 + 3\n\n\nNote how there is now no output with square brackets.\nTo see the value in the variable \nx\n use the following command:\n\n\nprint(my_result)\n\n\nYou will also see that \nmy_result\n has been added to the \nValues\n section of the \nEnvironment\n pane (top right) in R Studio.\n\n\nGetting help\n\n\nWe have just used our first \nR\n function - \nprint\n.\nFunctions take input surrounded by brackets.\n\n\nTo get more information on how to use a function you can use \n?\n, for example:\n\n\n?print\n\n\nYou will then see more information in the \nHelp\n tab on the function in the bottom right pane in R Studio.\nThis is a tab in the pane which initially held the \nFiles\n - this can easily be recovered from tab menu there.", 
            "title": "Introduction"
        }, 
        {
            "location": "/intro/#basic-maths", 
            "text": "R  can be used as a simple calculator.\nAs in many programming languages, multiply is  *  and divide is  / .", 
            "title": "Basic maths"
        }, 
        {
            "location": "/intro/#addition", 
            "text": "1 + 2\n\n[1] 3", 
            "title": "Addition"
        }, 
        {
            "location": "/intro/#division", 
            "text": "1 / 2 [1] 0.5", 
            "title": "Division"
        }, 
        {
            "location": "/intro/#multiplication", 
            "text": "2 * 2\n\n[1] 4", 
            "title": "Multiplication"
        }, 
        {
            "location": "/intro/#keeping-the-results-of-calculations", 
            "text": "If this was the only thing  R  could do it would be pretty useless.\nIt is very useful to to store the results of a command with a name so we can use it again later.\nIn programming this is called assigning a value in a  variable .\nIn  R  there are two commands to assign a value to a variable -  -  and  = .\nTry the following:  my_result  - 7 + 3  Note how there is now no output with square brackets.\nTo see the value in the variable  x  use the following command:  print(my_result)  You will also see that  my_result  has been added to the  Values  section of the  Environment  pane (top right) in R Studio.", 
            "title": "Keeping the results of calculations"
        }, 
        {
            "location": "/intro/#getting-help", 
            "text": "We have just used our first  R  function -  print .\nFunctions take input surrounded by brackets.  To get more information on how to use a function you can use  ? , for example:  ?print  You will then see more information in the  Help  tab on the function in the bottom right pane in R Studio.\nThis is a tab in the pane which initially held the  Files  - this can easily be recovered from tab menu there.", 
            "title": "Getting help"
        }, 
        {
            "location": "/data_from_files/", 
            "text": "Getting data from a file\n\n\nIn order to work on real data the first thing we need to learn is how to read from files.\n\n\nWorking directory\n\n\nThe working directory is the where \nR\n looks when we give it a file name, and where it will save things when we do that.\n\n\nLet's see what the current working directory is:\n\n\n cwd()\n\n\nIn OS X or Linux the result should look like:\n\n\n[1] \"/home/your_username/\"\n\n\nOn Windows more like:\n\n\n[1] \"C:\\Users\\your_username\"\n\n\nIt is a good idea to use a separate directory for all of your projects.\nTo change the working directory you can either use the command \nsetwd\n or the \nFiles\n tab of the bottom right pane in R Studio.\n\n\nTo do the latter, navigate to the folder you want to use for this tutorial (you can create a new one using the \nNew Folder\n option if you wish).\nThen go to the \nMore\n option and select \nSet As Working Directory\n. You will see the \nsetwd\n command used appears in the \nConsole\n.\n\n\nReading a file\n\n\nDownload the file \ntitanic-train.csv\n and save it into your working directory.\nThis data was the training set for the \nKaggle Titanic challenge\n.\n\n\n train \n- read.csv('titanic-train.csv')\n\n\nYou should now see an entry for \ntrain\n in the \nEnvironment\n pane under the \nData\n heading.\nClick on this line and a new pane will appear above the \nConsole\n showing the contents of the \ntrain\n variable as a table, something like this:\n\n\n\n\nExamining the data\n\n\nYou can use the commands \nhead\n and \ntail\n to view the first or last six lines of the data:\n\n\n head(train)\n\n\n\n\nNotice how when more columns are provided in the data than there is space to show the rows are split and referenced using an index/row name - the number before the data on each line.\n\n\nTry using the help to find out how to show a different number of lines.\n\n\nThe \nnames\n command lists all of the columns in the data:\n\n\n names(train)\n\n[1] \nPassengerId\n \nSurvived\n    \nPclass\n      \nName\n        \nSex\n         \nAge\n         \nSibSp\n      `\n[8] \nParch\n     \nTicket\n      \nFare\n        \nCabin\n       \nEmbarked\n\n\n\n\n\nA quick overview of the data can be obtained using \nsummary\n:\n\n\n summary(trains)\n\n\n\n\nA few things can be seen very easily in this summary - for example there are a lot of \nNA\ns in the Age column (177 in fact).\nIn this case this isn't an actual NA in the input file, \nR\n has recognized a blank line in a numerical column and replaced it with \nNA\n.\n\n\nTo access all values from a particular column we use the \n$\n syntax.\nTo see all the values from the \nAge\n column use:\n\n\n train$Age\n\n\nChallenge - reading a tab separated file\n\n\nDownload the file \ntitanic-gendered.csv\n.\nTry to load it using \nread.csv\n (remember to copy or move it to your working directory).\nDo the columns produced look sensible?\nTry using \n?read.csv\n to get help to read this file correctly.\n\n\nYou will need to know that 'whitespace' characters are often encoded using what are called escape characters.\nFor example, in \nR\n the escape character is \n\\\n.\nTab is encoded as \n\\t\n.\n\n\nNext", 
            "title": "Reading Data"
        }, 
        {
            "location": "/data_from_files/#getting-data-from-a-file", 
            "text": "In order to work on real data the first thing we need to learn is how to read from files.", 
            "title": "Getting data from a file"
        }, 
        {
            "location": "/data_from_files/#working-directory", 
            "text": "The working directory is the where  R  looks when we give it a file name, and where it will save things when we do that.  Let's see what the current working directory is:   cwd()  In OS X or Linux the result should look like:  [1] \"/home/your_username/\"  On Windows more like:  [1] \"C:\\Users\\your_username\"  It is a good idea to use a separate directory for all of your projects.\nTo change the working directory you can either use the command  setwd  or the  Files  tab of the bottom right pane in R Studio.  To do the latter, navigate to the folder you want to use for this tutorial (you can create a new one using the  New Folder  option if you wish).\nThen go to the  More  option and select  Set As Working Directory . You will see the  setwd  command used appears in the  Console .", 
            "title": "Working directory"
        }, 
        {
            "location": "/data_from_files/#reading-a-file", 
            "text": "Download the file  titanic-train.csv  and save it into your working directory.\nThis data was the training set for the  Kaggle Titanic challenge .   train  - read.csv('titanic-train.csv')  You should now see an entry for  train  in the  Environment  pane under the  Data  heading.\nClick on this line and a new pane will appear above the  Console  showing the contents of the  train  variable as a table, something like this:", 
            "title": "Reading a file"
        }, 
        {
            "location": "/data_from_files/#examining-the-data", 
            "text": "You can use the commands  head  and  tail  to view the first or last six lines of the data:   head(train)   Notice how when more columns are provided in the data than there is space to show the rows are split and referenced using an index/row name - the number before the data on each line.  Try using the help to find out how to show a different number of lines.  The  names  command lists all of the columns in the data:   names(train)\n\n[1]  PassengerId   Survived      Pclass        Name          Sex           Age           SibSp       `\n[8]  Parch       Ticket        Fare          Cabin         Embarked   A quick overview of the data can be obtained using  summary :   summary(trains)   A few things can be seen very easily in this summary - for example there are a lot of  NA s in the Age column (177 in fact).\nIn this case this isn't an actual NA in the input file,  R  has recognized a blank line in a numerical column and replaced it with  NA .  To access all values from a particular column we use the  $  syntax.\nTo see all the values from the  Age  column use:   train$Age", 
            "title": "Examining the data"
        }, 
        {
            "location": "/data_from_files/#challenge-reading-a-tab-separated-file", 
            "text": "Download the file  titanic-gendered.csv .\nTry to load it using  read.csv  (remember to copy or move it to your working directory).\nDo the columns produced look sensible?\nTry using  ?read.csv  to get help to read this file correctly.  You will need to know that 'whitespace' characters are often encoded using what are called escape characters.\nFor example, in  R  the escape character is  \\ .\nTab is encoded as  \\t .  Next", 
            "title": "Challenge - reading a tab separated file"
        }
    ]
}