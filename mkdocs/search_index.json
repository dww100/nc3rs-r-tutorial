{
    "docs": [
        {
            "location": "/",
            "text": "NC3Rs David Sainsbury Fellows Meeting: R Tutorial\n\n\nThis tutorial provides a basic introduction to the \nR\n statistical modelling and graphing environment.\nThe basic goal is to demonstrate that scripting and analysis in a programming language like \nR\n is vastly superior to using spreadsheets (such as Excel).\nNo assumptions are made about previous programming experience.\n\n\nLearning objectives\n\n\nAfter completing this tutorial you should:\n\n\n\n\nbe familiar with basic \nR\n commands and \nR Studio\n\n\nbe able to import, explore and manipulate your data in \nR\n\n\nknow how and where to get help and documentation\n\n\nbe capable of creating and modifying simple \nR\n scripts\n\n\nseen how to create a beautiful plot using \nggplot2\n\n\n\n\nPrerequisites\n\n\nTo follow this course you need to have installed \nR\n and \nR Studio\n on your laptop.\nIf you haven't already done so they can be downloaded (for free) from the links below:\n\n\n\n\nR\n\n\nR Studio\n\n\n\n\nFurther preparation\n\n\nThe latter stages of the tutorial make use of some additional libraries.\nInstructions on how to install them are provided in the flow of the tutorial but if you want to be ahead of the curve you can install them before you start.\nOpen \nR Studio\n and type the following command at the \n>\n prompt:\n\n\ninstall.packages(c(\"ggplot2\", \"scales\", \"ggrepel\", \"ggthemes\"))\n\n\n\n\nYou may be prompted to pick a 'mirror', any choice shuld work but picking the closest site to you is recommended.\n\n\nAcknowledgments\n\n\nContent of this tutorial built upon the following:\n\n\n\n\nNIH - Introduction to R for Non-programmers\n\n\nJim Tyson - First course in R\n\n\nAltaf Ali - Data Visualization in R with ggplot2\n\n\nHarvard University - Introduction to R Graphics with ggplot2",
            "title": "Home"
        },
        {
            "location": "/#nc3rs-david-sainsbury-fellows-meeting-r-tutorial",
            "text": "This tutorial provides a basic introduction to the  R  statistical modelling and graphing environment.\nThe basic goal is to demonstrate that scripting and analysis in a programming language like  R  is vastly superior to using spreadsheets (such as Excel).\nNo assumptions are made about previous programming experience.",
            "title": "NC3Rs David Sainsbury Fellows Meeting: R Tutorial"
        },
        {
            "location": "/#learning-objectives",
            "text": "After completing this tutorial you should:   be familiar with basic  R  commands and  R Studio  be able to import, explore and manipulate your data in  R  know how and where to get help and documentation  be capable of creating and modifying simple  R  scripts  seen how to create a beautiful plot using  ggplot2",
            "title": "Learning objectives"
        },
        {
            "location": "/#prerequisites",
            "text": "To follow this course you need to have installed  R  and  R Studio  on your laptop.\nIf you haven't already done so they can be downloaded (for free) from the links below:   R  R Studio",
            "title": "Prerequisites"
        },
        {
            "location": "/#further-preparation",
            "text": "The latter stages of the tutorial make use of some additional libraries.\nInstructions on how to install them are provided in the flow of the tutorial but if you want to be ahead of the curve you can install them before you start.\nOpen  R Studio  and type the following command at the  >  prompt:  install.packages(c(\"ggplot2\", \"scales\", \"ggrepel\", \"ggthemes\"))  You may be prompted to pick a 'mirror', any choice shuld work but picking the closest site to you is recommended.",
            "title": "Further preparation"
        },
        {
            "location": "/#acknowledgments",
            "text": "Content of this tutorial built upon the following:   NIH - Introduction to R for Non-programmers  Jim Tyson - First course in R  Altaf Ali - Data Visualization in R with ggplot2  Harvard University - Introduction to R Graphics with ggplot2",
            "title": "Acknowledgments"
        },
        {
            "location": "/intro/",
            "text": "First things first, open up R studio.\n\n\n\n\nYou should see something like the above; a window with three panes - a \nConsole\n with some introductory text and a blue \n>\n prompt, an empty \nEnviroment\n and a \nFiles\n browser showing the contents of the current directory.\n\n\nLets start with some very basic commands.\nYou need to select the \nConsole\n window and type after the \n>\n prompt (and type \nEnter\n after each command to execute).\n\n\nIn the rest of the text we will use the following conventions (which echo what you will see in your \nCommand\n window):\n\n\n\n\nCommands will be shown with a preceding \n>\n prompt. Note: You must \nnot\n type \n>\n in as part of the command.\n\n\nThe output expected from \nR\n will be preceded by a number in square brackets (for example \n[1]\n)\n\n\n\n\nBasic maths\n\n\nR\n can be used as a simple calculator.\nAs in many programming languages, multiply is \n*\n and divide is \n/\n.\n\n\nAddition\n\n\n> 1 + 2\n\n[1] 3\n\n\n\n\nDivision\n\n\n> 1 / 2\n\n[1] 0.5\n\n\n\n\nMultiplication\n\n\n> 2 * 2\n\n[1] 4\n\n\n\n\nKeeping the results of calculations\n\n\nIf this was the only thing \nR\n could do it would be pretty useless.\nWe need to be able to store the results of a command with a name in order to use it again later.\nIn programming this is called assigning a value in a \nvariable\n.\nIn \nR\n there are two commands to assign a value to a variable; \n<-\n and \n=\n.\nTry the following:\n\n\nmy_result <- 7 + 3\n\n\nNote how there is now no output with square brackets.\nTo see the value in the variable \nmy_result\n use the following command:\n\n\nprint(my_result)\n\n\nYou will also see that \nmy_result\n has been added to the \nValues\n section of the \nEnvironment\n pane (top right) in \nR Studio\n.\n\n\nGetting help\n\n\nWe have just used our first \nR\n function - \nprint\n.\nFunctions take input surrounded by brackets\nIn the example above we used the variable \nmy_results\n as input to the \nprint\n function.\n\n\nTo get more information on how to use a function you can use \n?\n, for example:\n\n\n?print\n\n\nInformation on the function will be shown in the \nHelp\n tab of the bottom right pane in \nR Studio\n.\nYou can get return to the \nFiles\n information at any time from the tab list.",
            "title": "Introduction"
        },
        {
            "location": "/intro/#basic-maths",
            "text": "R  can be used as a simple calculator.\nAs in many programming languages, multiply is  *  and divide is  / .",
            "title": "Basic maths"
        },
        {
            "location": "/intro/#addition",
            "text": "> 1 + 2\n\n[1] 3",
            "title": "Addition"
        },
        {
            "location": "/intro/#division",
            "text": "> 1 / 2\n\n[1] 0.5",
            "title": "Division"
        },
        {
            "location": "/intro/#multiplication",
            "text": "> 2 * 2\n\n[1] 4",
            "title": "Multiplication"
        },
        {
            "location": "/intro/#keeping-the-results-of-calculations",
            "text": "If this was the only thing  R  could do it would be pretty useless.\nWe need to be able to store the results of a command with a name in order to use it again later.\nIn programming this is called assigning a value in a  variable .\nIn  R  there are two commands to assign a value to a variable;  <-  and  = .\nTry the following:  my_result <- 7 + 3  Note how there is now no output with square brackets.\nTo see the value in the variable  my_result  use the following command:  print(my_result)  You will also see that  my_result  has been added to the  Values  section of the  Environment  pane (top right) in  R Studio .",
            "title": "Keeping the results of calculations"
        },
        {
            "location": "/intro/#getting-help",
            "text": "We have just used our first  R  function -  print .\nFunctions take input surrounded by brackets\nIn the example above we used the variable  my_results  as input to the  print  function.  To get more information on how to use a function you can use  ? , for example:  ?print  Information on the function will be shown in the  Help  tab of the bottom right pane in  R Studio .\nYou can get return to the  Files  information at any time from the tab list.",
            "title": "Getting help"
        },
        {
            "location": "/data_from_files/",
            "text": "In order to work on real data the first thing we need to learn is how to read from files.\n\n\nWorking directory\n\n\nThe working directory is the where \nR\n looks if we tell it to work woth a file, either to load or save data (unless we tell it otherwise).\n\n\nLet's see what the current working directory is:\n\n\n> cwd()\n\n\nIn OS X or Linux the result should look like:\n\n\n[1] \"/home/your_username/\"\n\n\nOn Windows it should look more like:\n\n\n[1] \"C:\\Users\\your_username\"\n\n\nIt is a good idea to use a separate directory for all of your projects.\nTo change the working directory you can either use the command \nsetwd\n or the \nFiles\n tab of the bottom right pane in R Studio.\n\n\nTo do the latter, navigate to the folder you want to use for this tutorial (you can create a new one using the \nNew Folder\n option if you wish).\nThen go to the \nMore\n option and select \nSet As Working Directory\n. You will see the \nsetwd\n command used appears in the \nConsole\n.\n\n\nReading a file\n\n\nDownload the file \ntitanic-train.csv\n and save it into your working directory.\nThis data was the training set for the \nKaggle Titanic challenge\n.\n\n\n> train <- read.csv('titanic-train.csv')\n\n\nYou should now see an entry for \ntrain\n in the \nEnvironment\n pane under the \nData\n heading.\nClick on this line and a new pane will appear above the \nConsole\n showing the contents of the \ntrain\n variable as a table, something like this:\n\n\n\n\nExamining the data\n\n\nYou can use the commands \nhead\n and \ntail\n to view the first or last six lines of the data:\n\n\n> head(train)\n\n\n\n\nNotice how when more columns are provided in the data than there is space to display the rows are split and referenced using an index/row name - the number before the data on each line.\n\n\nTry using the help to find out how to display a different number of lines.\n\n\nThe \nnames\n command lists all of the columns in the data:\n\n\n> names(train)\n\n[1] \"PassengerId\" \"Survived\"    \"Pclass\"      \"Name\"        \"Sex\"         \"Age\"         \"SibSp\"      `\n[8] \"Parch\"     \"Ticket\"      \"Fare\"        \"Cabin\"       \"Embarked\"\n\n\n\n\nA quick overview of the data can be obtained using \nsummary\n:\n\n\n> summary(trains)\n\n\n\n\nA few things can be seen very easily in this summary - for example there are a lot of \nNA\ns in the Age column (177 in fact).\nIn this case, this isn't an actual NA in the input file.\n\nR\n has recognized a blank line in a numerical column and replaced it with \nNA\n.\n\n\nTo access all values from a particular column we use the \n$\n syntax.\nTo see all the values from the \nAge\n column use:\n\n\n> train$Age\n\n\nChallenge - reading a tab separated file\n\n\nDownload the file \ntitanic-gendered.csv\n.\nTry to load it using \nread.csv\n (remember to copy or move it to your working directory).\nDo the columns produced look sensible?\nTry using \n?read.csv\n to get help to read this file correctly.\n\n\nYou will need to know that 'whitespace' characters are often encoded using what are called escape characters.\nFor example, in \nR\n the escape character is \n\\\n.\nTab is encoded as \n\\t\n.",
            "title": "Reading data from files"
        },
        {
            "location": "/data_from_files/#working-directory",
            "text": "The working directory is the where  R  looks if we tell it to work woth a file, either to load or save data (unless we tell it otherwise).  Let's see what the current working directory is:  > cwd()  In OS X or Linux the result should look like:  [1] \"/home/your_username/\"  On Windows it should look more like:  [1] \"C:\\Users\\your_username\"  It is a good idea to use a separate directory for all of your projects.\nTo change the working directory you can either use the command  setwd  or the  Files  tab of the bottom right pane in R Studio.  To do the latter, navigate to the folder you want to use for this tutorial (you can create a new one using the  New Folder  option if you wish).\nThen go to the  More  option and select  Set As Working Directory . You will see the  setwd  command used appears in the  Console .",
            "title": "Working directory"
        },
        {
            "location": "/data_from_files/#reading-a-file",
            "text": "Download the file  titanic-train.csv  and save it into your working directory.\nThis data was the training set for the  Kaggle Titanic challenge .  > train <- read.csv('titanic-train.csv')  You should now see an entry for  train  in the  Environment  pane under the  Data  heading.\nClick on this line and a new pane will appear above the  Console  showing the contents of the  train  variable as a table, something like this:",
            "title": "Reading a file"
        },
        {
            "location": "/data_from_files/#examining-the-data",
            "text": "You can use the commands  head  and  tail  to view the first or last six lines of the data:  > head(train)   Notice how when more columns are provided in the data than there is space to display the rows are split and referenced using an index/row name - the number before the data on each line.  Try using the help to find out how to display a different number of lines.  The  names  command lists all of the columns in the data:  > names(train)\n\n[1] \"PassengerId\" \"Survived\"    \"Pclass\"      \"Name\"        \"Sex\"         \"Age\"         \"SibSp\"      `\n[8] \"Parch\"     \"Ticket\"      \"Fare\"        \"Cabin\"       \"Embarked\"  A quick overview of the data can be obtained using  summary :  > summary(trains)   A few things can be seen very easily in this summary - for example there are a lot of  NA s in the Age column (177 in fact).\nIn this case, this isn't an actual NA in the input file. R  has recognized a blank line in a numerical column and replaced it with  NA .  To access all values from a particular column we use the  $  syntax.\nTo see all the values from the  Age  column use:  > train$Age",
            "title": "Examining the data"
        },
        {
            "location": "/data_from_files/#challenge-reading-a-tab-separated-file",
            "text": "Download the file  titanic-gendered.csv .\nTry to load it using  read.csv  (remember to copy or move it to your working directory).\nDo the columns produced look sensible?\nTry using  ?read.csv  to get help to read this file correctly.  You will need to know that 'whitespace' characters are often encoded using what are called escape characters.\nFor example, in  R  the escape character is  \\ .\nTab is encoded as  \\t .",
            "title": "Challenge - reading a tab separated file"
        },
        {
            "location": "/processing_data/",
            "text": "In many situations we don't want, or need, to work with all the data.\nInstead, we are only interested in a subset of the information.\n\nR\n provides several ways to access only parts of the data you have read in.\n\n\nSubsetting\n\n\nPerhaps the most common need is to filter your dataset to look at only that part which meets some criteria.\nIn \nR\n, this is most simply done using the \nsubset\n function.\nLet's look at just the female passengers:\n\n\n> females <- subset(train, Sex == \"female\")\n\n\nNote that we use \n==\n here as we want an equality (\n=\n is used for assignment).\nWe can also use other comparisons.\nThe full set of options is:\n\n\n\n\n\n\n\n\nOperator\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n<\n\n\nless than\n\n\n\n\n\n\n<=\n\n\nless than or equal to\n\n\n\n\n\n\n<\n\n\ngreater than\n\n\n\n\n\n\n<=\n\n\ngreater than or equal to\n\n\n\n\n\n\n==\n\n\nexactly equal to\n\n\n\n\n\n\n!=\n\n\nnot equal to\n\n\n\n\n\n\n\n\nSelect data for passengers who are not in first class with:\n\n\n> commoners <- subset(train, Pclass > 1)\n\n\nYou can combine multiple filters using the logical operators \n&\n for AND and \n|\n for OR:\n\n\n> female_commoners <- subset(train, Pclass > 1 & Sex == \"female\")\n\n\nSometimes it is more useful to refer to specific rows, columns, or both using the \n[]\n notation.\n\nR\n interprets numbers within square brackets as [row, column].\nSo for example, \ntrain[1,2]\n would return \n0\n as Mr. Owen Harris Braund (the first passenger in our table) sadly did not survive (the second column is \nSurvived\n).\n\n\nWe can select a value using just rows, just columns, or both, using column/row numbers.\nWe can also ask for a set of rows or columns, referred to as a\nslice, using \n:\n.\nFor example to get all columns for the first 5 passengers (rows) use:\n\n\n> train[1:5, ]\n\n\nTo get the first two columns for all passengers:\n\n\n> train[, 1:2]\n\n\nIn these examples a blank entry for column or row selects all entries.\nIf we want to exclude a line, for example if we believe Mr. Owen Harris Braund to have lied about his age, we can use a negative value:\n\n\n> no_braund <- train[-1,]\n\n\nYou can also combine selections of both rows and columns:\n\n\n> train[-1, 1:2]\n\n\nThis command would select the first two columns for everyone but that scandalous liar Braund.\n\n\nDealing with NAs\n\n\nWe have already seen that the \nAge\n column in our data contains many \nNA\n values.\nThis can have an impact on calculations performed on the data.\nFor example if we try to calculate the average age of passengers:\n\n\n> mean(train$Age)\n\n[1] NA\n\n\n\n\nWe can get a valid result if we remove all the \nNA\n values using:\n\n\n> mean(train$Age, na.rm=TRUE)\n\n[1] 29.69912\n\n\n\n\nRather than type this in every time we want to perform a calculation with the \nAge\n, it would be better to create a copy of the dataset but only including records with valid \nAge\n values.\nThis can be done by using the following command:\n\n\n> has_age <- train[!is.na(train$Age), ]\n\n\nThis uses the \nis.na\n function on the \nAge\n column to create a filter that only selects the \nNA\n entries.\nThe \n!\n works as a logical NOT - we don't want to keep these \nNA\n entries after all.\nThis filter can then be used in the same way as we previously used ranges like \n1:2\n to select only the rows we want to keep.\n\n\nThere is a handy function that removes any rows with \nNA\n entries:\n\n\n> no_na <- na.omit(train)\n\n\nBe careful when you use it however as it will remove rows even if the \nNA\n is in a column that you don't wish to process.\n\n\nSaving processed data\n\n\nNow that we have made changes to our data we will probably want to keep them available for future analysis sessions.\nTo save a CSV file we can use the \nwrite.csv\n command:\n\n\n> write.csv(has_age, file='validated.csv')\n\n\nLet's load up the file we saved using:\n\n\n> validated <- read.csv('validated.csv')\n\n\nInspect \nvalidated\n and you will see that we have a new and unwanted column \nX\n.\nWhat has happened is that by default \nR\n saves a name for each row (we first encountered these when we examined the input data).\nTo prevent this use:\n\n\n> write.csv(has_age, file='validated.csv', row.names=FALSE)",
            "title": "Working with data"
        },
        {
            "location": "/processing_data/#subsetting",
            "text": "Perhaps the most common need is to filter your dataset to look at only that part which meets some criteria.\nIn  R , this is most simply done using the  subset  function.\nLet's look at just the female passengers:  > females <- subset(train, Sex == \"female\")  Note that we use  ==  here as we want an equality ( =  is used for assignment).\nWe can also use other comparisons.\nThe full set of options is:     Operator  Description      <  less than    <=  less than or equal to    <  greater than    <=  greater than or equal to    ==  exactly equal to    !=  not equal to     Select data for passengers who are not in first class with:  > commoners <- subset(train, Pclass > 1)  You can combine multiple filters using the logical operators  &  for AND and  |  for OR:  > female_commoners <- subset(train, Pclass > 1 & Sex == \"female\")  Sometimes it is more useful to refer to specific rows, columns, or both using the  []  notation. R  interprets numbers within square brackets as [row, column].\nSo for example,  train[1,2]  would return  0  as Mr. Owen Harris Braund (the first passenger in our table) sadly did not survive (the second column is  Survived ).  We can select a value using just rows, just columns, or both, using column/row numbers.\nWe can also ask for a set of rows or columns, referred to as a\nslice, using  : .\nFor example to get all columns for the first 5 passengers (rows) use:  > train[1:5, ]  To get the first two columns for all passengers:  > train[, 1:2]  In these examples a blank entry for column or row selects all entries.\nIf we want to exclude a line, for example if we believe Mr. Owen Harris Braund to have lied about his age, we can use a negative value:  > no_braund <- train[-1,]  You can also combine selections of both rows and columns:  > train[-1, 1:2]  This command would select the first two columns for everyone but that scandalous liar Braund.",
            "title": "Subsetting"
        },
        {
            "location": "/processing_data/#dealing-with-nas",
            "text": "We have already seen that the  Age  column in our data contains many  NA  values.\nThis can have an impact on calculations performed on the data.\nFor example if we try to calculate the average age of passengers:  > mean(train$Age)\n\n[1] NA  We can get a valid result if we remove all the  NA  values using:  > mean(train$Age, na.rm=TRUE)\n\n[1] 29.69912  Rather than type this in every time we want to perform a calculation with the  Age , it would be better to create a copy of the dataset but only including records with valid  Age  values.\nThis can be done by using the following command:  > has_age <- train[!is.na(train$Age), ]  This uses the  is.na  function on the  Age  column to create a filter that only selects the  NA  entries.\nThe  !  works as a logical NOT - we don't want to keep these  NA  entries after all.\nThis filter can then be used in the same way as we previously used ranges like  1:2  to select only the rows we want to keep.  There is a handy function that removes any rows with  NA  entries:  > no_na <- na.omit(train)  Be careful when you use it however as it will remove rows even if the  NA  is in a column that you don't wish to process.",
            "title": "Dealing with NAs"
        },
        {
            "location": "/processing_data/#saving-processed-data",
            "text": "Now that we have made changes to our data we will probably want to keep them available for future analysis sessions.\nTo save a CSV file we can use the  write.csv  command:  > write.csv(has_age, file='validated.csv')  Let's load up the file we saved using:  > validated <- read.csv('validated.csv')  Inspect  validated  and you will see that we have a new and unwanted column  X .\nWhat has happened is that by default  R  saves a name for each row (we first encountered these when we examined the input data).\nTo prevent this use:  > write.csv(has_age, file='validated.csv', row.names=FALSE)",
            "title": "Saving processed data"
        },
        {
            "location": "/scripting/",
            "text": "A key to making your science reproducible is making the steps involved in your analysis available to others (and indeed your future self).\nA script is nothing more complicated that a file containing all of the commands that you want to run on your data which can be executed again.\n\n\nThe fact that you have recorded your steps means that not only can you reproduce what you did in the past, but you can quickly re-apply the same steps to a new dataset.\n\n\nCreating a script in R Studio\n\n\nOpen a new file from the menu by selecting \nFile\n -> \nNew File\n -> \nR Script\n (or use the keyboard shortcut \nCtrl\n + \nShift\n + \nN\n).\nAn empty file will appear in the pane above the \nConsole\n.\n\n\nWrite commands into this pane to:\n\n\n\n\nload the original titanic data\n\n\nremove lines with no values provided for the passengers \nAge\n \n\n\nsave a new file into this pane\n\n\n\n\nWe have already seen how do all of these steps.\nAll that is required is to put them together in the correct order.\n\n\nYou can provide information on what the lines do using comments.\nComments are lines beginning with \n#\n which are ignored by \nR\n but can be read by people looking at your script.\nYour scripts should look something like:\n\n\n# Load the original data\ntrain <- read.csv('titanic-train.csv')\n\n# Remove rows with no Age value in original data\nhas_age <- train[!is.na(train$Age), ]\n\n# Save data with valid Ages\nwrite.csv(has_age, file='validated.csv', row.names=FALSE)\n\n\n\n\nSave this as a file using the menu selection \nFile\n -> \nSave\n (or the shortcut \nCtrl\n + \nS\n).\nCall the file 'remove-nas.R', as the standard extension for an \nR\n script is '.R'.\n\n\nSourcing the script\n\n\nIf the same variable names are in the script as were entered before then this will be over written.\nAlso, where a variable is used in the script but not given a value it can use these earlier entries.\nIn order to ensure our script can be used in future, even if we haven't entered any commands, we need to remove the versions of variables we have created previously.\nUse the menu option \nSession\n -> \nClear Workspace\n to do this.\n\n\nNow we can execute the script.\nThere are several different ways to do this:\n\n\n\n\nFrom the main menu select \nCode\n -> \nSource\n\n\nSelect the \nSource\n button on the script pane \n\n\nUse the keyboard shortcut \nCtrl\n + \nShift\n + \nS\n\n\n\n\nOnce run, you should see \ntrain\n and \nhas_age\n in the \nData\n section of the \nEnvironment\n pane.\nCheck that these contain the data as expected (perhaps also look in the 'validated.csv' file).",
            "title": "Scripting"
        },
        {
            "location": "/scripting/#creating-a-script-in-r-studio",
            "text": "Open a new file from the menu by selecting  File  ->  New File  ->  R Script  (or use the keyboard shortcut  Ctrl  +  Shift  +  N ).\nAn empty file will appear in the pane above the  Console .  Write commands into this pane to:   load the original titanic data  remove lines with no values provided for the passengers  Age    save a new file into this pane   We have already seen how do all of these steps.\nAll that is required is to put them together in the correct order.  You can provide information on what the lines do using comments.\nComments are lines beginning with  #  which are ignored by  R  but can be read by people looking at your script.\nYour scripts should look something like:  # Load the original data\ntrain <- read.csv('titanic-train.csv')\n\n# Remove rows with no Age value in original data\nhas_age <- train[!is.na(train$Age), ]\n\n# Save data with valid Ages\nwrite.csv(has_age, file='validated.csv', row.names=FALSE)  Save this as a file using the menu selection  File  ->  Save  (or the shortcut  Ctrl  +  S ).\nCall the file 'remove-nas.R', as the standard extension for an  R  script is '.R'.",
            "title": "Creating a script in R Studio"
        },
        {
            "location": "/scripting/#sourcing-the-script",
            "text": "If the same variable names are in the script as were entered before then this will be over written.\nAlso, where a variable is used in the script but not given a value it can use these earlier entries.\nIn order to ensure our script can be used in future, even if we haven't entered any commands, we need to remove the versions of variables we have created previously.\nUse the menu option  Session  ->  Clear Workspace  to do this.  Now we can execute the script.\nThere are several different ways to do this:   From the main menu select  Code  ->  Source  Select the  Source  button on the script pane   Use the keyboard shortcut  Ctrl  +  Shift  +  S   Once run, you should see  train  and  has_age  in the  Data  section of the  Environment  pane.\nCheck that these contain the data as expected (perhaps also look in the 'validated.csv' file).",
            "title": "Sourcing the script"
        },
        {
            "location": "/basic_graphing/",
            "text": "R\n has many graphing options.\nHere we introduce those available without any libraries.\nThis is known as base graphing.\nIn this introduction, we will only cover how to make quick plots using these functions but they are in fact very flexible and can easily be made publication quality.\n\n\nScatter plot\n\n\nThe simplest plot available in base \nR\n graphing is the scatter plot.\nThis is created using the command:\n\n\n> plot(has_age$Age, has_age$Fare)\n\n\nThis command will create the plot below (showing pretty much no coirrelation).\n\n\n\n\nThere are many options to alter the appearance of the graph that can be passed to the \nplot\n function.\nSome of the most common are:\n\n\n\n\n\n\n\n\nOption\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ncol\n\n\nColour\n\n\n\n\n\n\nlwd\n\n\nLine width\n\n\n\n\n\n\nxlab\n\n\nX-axis label\n\n\n\n\n\n\nylab\n\n\nY-axis label\n\n\n\n\n\n\nmain\n\n\nMain plot title\n\n\n\n\n\n\n\n\nThe help for \nplot\n (found using \n?plot\n) is less straight forward than usual.\nMore helpful information on these parameters is available in the \npar\n and \nplot.default\n help files.\n\n\nHere is an example of how to improve the graph appearance:\n\n\nplot(has_age$Age, has_age$Fare,\n     col = 'red',\n     lwd = 2,\n     xlab = 'Age',\n     ylab = 'Fare',\n     main = 'Fare vs Age on the Titanic'\n     )\n\n\n\n\n\n\nChallenge\n\n\nLook up the functions \nlm\n and \nabline\n in the help and see if you can add a regression line to the plot to get something like this:\n\n\n\n\nNow we can be even more certain there is not trend ;)\n\n\nExample answer\n\n\nHistogram\n\n\nAnother plot that base graphics can produce simply is the histogram.\nThis is created using the \nhist\n command:\n\n\n> hist(has_age$Age, xlab ='Age')\n\n\n\n\nBox plot\n\n\nAn example of a slightly more complicated graph available in base graphing is the box plot.\n\n\n> boxplot(has_age$Fare ~ has_age$Survived, xlab='Survived?', ylab='Fare')",
            "title": "Basic Graphing"
        },
        {
            "location": "/basic_graphing/#scatter-plot",
            "text": "The simplest plot available in base  R  graphing is the scatter plot.\nThis is created using the command:  > plot(has_age$Age, has_age$Fare)  This command will create the plot below (showing pretty much no coirrelation).   There are many options to alter the appearance of the graph that can be passed to the  plot  function.\nSome of the most common are:     Option  Description      col  Colour    lwd  Line width    xlab  X-axis label    ylab  Y-axis label    main  Main plot title     The help for  plot  (found using  ?plot ) is less straight forward than usual.\nMore helpful information on these parameters is available in the  par  and  plot.default  help files.  Here is an example of how to improve the graph appearance:  plot(has_age$Age, has_age$Fare,\n     col = 'red',\n     lwd = 2,\n     xlab = 'Age',\n     ylab = 'Fare',\n     main = 'Fare vs Age on the Titanic'\n     )",
            "title": "Scatter plot"
        },
        {
            "location": "/basic_graphing/#challenge",
            "text": "Look up the functions  lm  and  abline  in the help and see if you can add a regression line to the plot to get something like this:   Now we can be even more certain there is not trend ;)  Example answer",
            "title": "Challenge"
        },
        {
            "location": "/basic_graphing/#histogram",
            "text": "Another plot that base graphics can produce simply is the histogram.\nThis is created using the  hist  command:  > hist(has_age$Age, xlab ='Age')",
            "title": "Histogram"
        },
        {
            "location": "/basic_graphing/#box-plot",
            "text": "An example of a slightly more complicated graph available in base graphing is the box plot.  > boxplot(has_age$Fare ~ has_age$Survived, xlab='Survived?', ylab='Fare')",
            "title": "Box plot"
        },
        {
            "location": "/advanced_graphing/",
            "text": "Advanced graphing with ggplot2\n\n\nIn this section we will recreate a graph from the Economist (shown below), providing a crash course in making beautiful figures with ggplot2.\n\n\n\n\nThis was originally used as a challenge in the Harvard tutorial available \nhere\n.\nIt is well worth checking out that tutorial to get a better understanding of the steps used here to build up the graph.\n\n\nAs we progress we will also introduce some new concepts in \nR\n which are useful beyond there relevance to making this graph.\n\n\nObtaining the data\n\n\nWe can load the data the graph is based on directly from the tutorial website using:\n\n\necon <- read.csv(\"https://dww100.github.io/nc3rs-r-tutorial/data/economist.csv\")\n\n\n\n\nThe data is available \nhere\n to download and read from the file system if you prefer.\n\n\nInvestigate the data using either the \nR Studio\n data viewer or using the command:\n\n\nhead(econ)\n\n\n\n\nThe two columns we are most interested in are \nCPI\n (Corruptions Perception Index) and \nHDI\n (Human Development Index).\n\n\nCreate a simple plot\n\n\nTo create a scatter plot of the data with \nCPI\n on the x-axis and \nHDI\n on the y-axis enter the folowing:\n\n\n> ggplot(econ, aes(x = CPI, y = HDI)) +\n  geom_point()\n\n\n\n\nAs in the earlier example the \nggplot\n command here creates the plot object and selects the \nCPI\n and \nHDI\n columns to be the x and y variables.\n\ngeom_point\n then adds the scatter plot layer.\nYour plot should look something like the one below.\n\n\n\n\nThis looks pretty bland and no distinction has been made between the points representing data different regions of the world.\nTo brighten the graph up lets color the points based on \nRegion\n and alter the dots to hollow points (as used in the Economist graph).\n\n\n>ggplot(econ, aes(x = CPI, y = HDI)) + \n  geom_point(aes(color = Region), shape = 1)\n\n\n\n\n\n\nAdding a trend line\n\n\nIn the Economist graph a line has been added to highlight the relationship between \nCPI\n and \nHDI\n to the viewer.\nThe \ngeom\n used in ggplot2 to add this trend line is \ngeom_smooth\n.\n\n\nIn order to add a trend line, we need to have a model linking changes in \nCPI\n to \nHDI\n.\nThe relationship here is a logarithmic one, mathematically the formula we want to use is \nHDI\n = log(\nCPI\n).\nIn \nR\n the \n=\n symbol is used for assignment and \n~\n is used instead.\n\n\nReplot the graph with an added trend line using:\n\n\n>ggplot(econ, aes(x = CPI, y = HDI)) + \n  geom_point(aes(color = Region), shape = 1) +\n  stat_smooth(method = \"lm\", formula = y ~ log(x), se = FALSE, color = \"red\")\n\n\n\n\n\n\nCompared to the circles, the trend line appears a bit too thick.\nReduce this size using the \nsize\n option:\n\n\n>ggplot(econ, aes(x = CPI, y = HDI)) + \n  geom_point(aes(color = Region), shape = 1, stroke = 1, size = 2.5) +\n  stat_smooth(method = \"lm\", formula = y ~ log(x), se = FALSE, color = \"red\", size = 0.5)\n\n\n\n\n\n\nIn the next part of the tutorial we will add labels to the plot and make the theme resemble the original plot.",
            "title": "Advanced Graphing I"
        },
        {
            "location": "/advanced_graphing/#advanced-graphing-with-ggplot2",
            "text": "In this section we will recreate a graph from the Economist (shown below), providing a crash course in making beautiful figures with ggplot2.   This was originally used as a challenge in the Harvard tutorial available  here .\nIt is well worth checking out that tutorial to get a better understanding of the steps used here to build up the graph.  As we progress we will also introduce some new concepts in  R  which are useful beyond there relevance to making this graph.",
            "title": "Advanced graphing with ggplot2"
        },
        {
            "location": "/advanced_graphing/#obtaining-the-data",
            "text": "We can load the data the graph is based on directly from the tutorial website using:  econ <- read.csv(\"https://dww100.github.io/nc3rs-r-tutorial/data/economist.csv\")  The data is available  here  to download and read from the file system if you prefer.  Investigate the data using either the  R Studio  data viewer or using the command:  head(econ)  The two columns we are most interested in are  CPI  (Corruptions Perception Index) and  HDI  (Human Development Index).",
            "title": "Obtaining the data"
        },
        {
            "location": "/advanced_graphing/#create-a-simple-plot",
            "text": "To create a scatter plot of the data with  CPI  on the x-axis and  HDI  on the y-axis enter the folowing:  > ggplot(econ, aes(x = CPI, y = HDI)) +\n  geom_point()  As in the earlier example the  ggplot  command here creates the plot object and selects the  CPI  and  HDI  columns to be the x and y variables. geom_point  then adds the scatter plot layer.\nYour plot should look something like the one below.   This looks pretty bland and no distinction has been made between the points representing data different regions of the world.\nTo brighten the graph up lets color the points based on  Region  and alter the dots to hollow points (as used in the Economist graph).  >ggplot(econ, aes(x = CPI, y = HDI)) + \n  geom_point(aes(color = Region), shape = 1)",
            "title": "Create a simple plot"
        },
        {
            "location": "/advanced_graphing/#adding-a-trend-line",
            "text": "In the Economist graph a line has been added to highlight the relationship between  CPI  and  HDI  to the viewer.\nThe  geom  used in ggplot2 to add this trend line is  geom_smooth .  In order to add a trend line, we need to have a model linking changes in  CPI  to  HDI .\nThe relationship here is a logarithmic one, mathematically the formula we want to use is  HDI  = log( CPI ).\nIn  R  the  =  symbol is used for assignment and  ~  is used instead.  Replot the graph with an added trend line using:  >ggplot(econ, aes(x = CPI, y = HDI)) + \n  geom_point(aes(color = Region), shape = 1) +\n  stat_smooth(method = \"lm\", formula = y ~ log(x), se = FALSE, color = \"red\")   Compared to the circles, the trend line appears a bit too thick.\nReduce this size using the  size  option:  >ggplot(econ, aes(x = CPI, y = HDI)) + \n  geom_point(aes(color = Region), shape = 1, stroke = 1, size = 2.5) +\n  stat_smooth(method = \"lm\", formula = y ~ log(x), se = FALSE, color = \"red\", size = 0.5)   In the next part of the tutorial we will add labels to the plot and make the theme resemble the original plot.",
            "title": "Adding a trend line"
        },
        {
            "location": "/advanced_graphing_ii/",
            "text": "Improving plot appearance in ggplot2\n\n\nOur graph now contains most of the functional data from the Economist graph.\nHowever, it misses the labels added to highlight some countries of note and doesn't yet look very attractive.\nLets put those things right.\n\n\nLabelling datapoints\n\n\nThe Economist chose to pick out a subset of countries to highlight.\nTo do the same in \nR\n we need to create a list of the datapoints we are interested in.\nTo create a list in \nR\n we use the \nc\n function:\n\n\n>target_countries <- c(\n  \"Russia\", \"Venezuela\", \"Iraq\", \"Myanmar\", \"Sudan\",\n  \"Afghanistan\", \"Congo\", \"Greece\", \"Argentina\", \"Brazil\",\n  \"India\", \"Italy\", \"China\", \"South Africa\", \"Spane\",\n  \"Botswana\", \"Cape Verde\", \"Bhutan\", \"Rwanda\", \"France\",\n  \"United States\", \"Germany\", \"Britain\", \"Barbados\", \"Norway\", \"Japan\",\n  \"New Zealand\", \"Singapore\"\n  )\n\n\n\n\nNow we need to pick out the data for these countries from \necon\n.\nThe operator \n%in%\n can be used to match entries in \necon$Country\n that appear in the \ntarget_countries\n list we just made.\nWe can combine this with the \nsubset\n function to get the data we want:\n\n\n>labeled_countries <- subset(econ, Country %in% target_countries)\n\n\n\n\nThis graph has a lot of closely packed datapoints and we don't want our labels to overlap.\nThis means we need a non-standard text labelling \ngeom\n.\nLoad the \nggrepel\n library to add this to our environment.\n\n\nlibrary(ggrepel)\n\n\n\n\nThe \ngeom\n we want is \ngeom_text_repel\n.\nAs we only want to label the countries in \nlabeled_countries\n we need to set the \ndata\n option for this \ngeom\n, rather than using the default inhereted from \nggplot\n (in this case \necon\n).\nTry creating teh labelled graph using:\n\n\n>ggplot(econ, aes(x = CPI, y = HDI)) + \n  geom_point(aes(color = Region), shape = 1, stroke = 1, size = 2.5) +\n  geom_text_repel(aes(label = Country), data = labeled_countries, force = 10) +\n  stat_smooth(method = \"lm\", formula = y ~ log(x), se = FALSE, color = \"red\", size = 0.5) \n\n\n\n\n\n\nPolishing the appearance\n\n\nNow all we need to do is improve the aesthetics of our graph.\nIn this step we will combine a few tweaks; Adjusting and labelling the the x and y scales and improving the colour scheme used.\n\n\nSo far, we have accepted the default colouring of the points.\nAn excellent resource for palettes which add clarity to your graphics is \nColor Brewer\n.\nFortunately, many of their colour schemes are built into the packages we have loaded, here we will chose the \nPaired\n palette.\n\n\nAn improved plot can be produced using the command below. Can you identify the additions which alter each element of the graph?\n\n\n>ggplot(econ, aes(x = CPI, y = HDI)) + \n  geom_point(aes(color = Region), shape = 1, stroke = 1, size = 2.5) +\n  geom_text_repel(aes(label = Country), data = labeled_countries, force = 10, color = \"gray20\") +\n  stat_smooth(method = \"lm\", formula = y ~ log(x), se = FALSE, color = \"red\", size = 0.5) +\n  scale_x_continuous(name = \"Corruption Perceptions Index, 2011 (10=least corrupt)\",\n  limits = c(.9, 10.5),\n  breaks = 1:10) +\n  scale_y_continuous(name = \"Human Development Index, 2011 (1=Best)\",\n  limits = c(0.2, 1.0),\n  breaks = seq(0.2, 1.0, by = 0.1)) +\n  scale_colour_brewer(palette=\"Paired\", direction = 1) \n\n\n\n\n\n\nIn \nggplot2\n nearly all aspects of the appearance of your graph can be edited.\nMany of the standard things you want to edit (font size, background colour, etc.) are grouped together as part of what is called the \ntheme\n.\nLook at the help using \n?theme\n to see all of the elements of teh plot you can change.\nA theme is added to a \nggplot\n object in the same way as elements such as \ngeoms\n.\n\n\nThankfully, we don't have to edit each element individually.\nThere are pre-selected themes available. \nHere we use the \ntheme_minimal\n selections and then customize it further.\nWe add a horizontal grid in line with the y axis tic marks and move the legend to the top of the plot.\n\n\n>ggplot(econ, aes(x = CPI, y = HDI)) + \n  geom_point(aes(color = Region), shape = 1, stroke = 1, size = 2.5) +\n  geom_text_repel(aes(label = Country), data = labeled_countries, force = 10, color = \"gray20\") +\n  stat_smooth(method = \"lm\", formula = y ~ log(x), se = FALSE, color = \"red\", size = 0.5) +\n  scale_x_continuous(name = \"Corruption Perceptions Index, 2011 (10=least corrupt)\",\n  limits = c(.9, 10.5),\n  breaks = 1:10) +\n  scale_y_continuous(name = \"Human Development Index, 2011 (1=Best)\",\n  limits = c(0.2, 1.0),\n  breaks = seq(0.2, 1.0, by = 0.1)) +\n  scale_colour_brewer(palette=\"Paired\", direction = 1) +\n  theme_minimal() +\n  theme(\n    legend.position = c(\"top\"),\n    legend.direction = \"horizontal\",\n    panel.grid.major = element_line(color = \"gray50\", size = 0.5),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank()\n  )\n\n\n\n\n\n\nThis is the end of the tutorial.\nYou now have a rather lovely looking plot and a good approximation of the Economist plot.\nYou should play with all of the options that have been introduced to you and see if you can improve the likeness (for example adding a title).",
            "title": "Advanced Graphing II"
        },
        {
            "location": "/advanced_graphing_ii/#improving-plot-appearance-in-ggplot2",
            "text": "Our graph now contains most of the functional data from the Economist graph.\nHowever, it misses the labels added to highlight some countries of note and doesn't yet look very attractive.\nLets put those things right.",
            "title": "Improving plot appearance in ggplot2"
        },
        {
            "location": "/advanced_graphing_ii/#labelling-datapoints",
            "text": "The Economist chose to pick out a subset of countries to highlight.\nTo do the same in  R  we need to create a list of the datapoints we are interested in.\nTo create a list in  R  we use the  c  function:  >target_countries <- c(\n  \"Russia\", \"Venezuela\", \"Iraq\", \"Myanmar\", \"Sudan\",\n  \"Afghanistan\", \"Congo\", \"Greece\", \"Argentina\", \"Brazil\",\n  \"India\", \"Italy\", \"China\", \"South Africa\", \"Spane\",\n  \"Botswana\", \"Cape Verde\", \"Bhutan\", \"Rwanda\", \"France\",\n  \"United States\", \"Germany\", \"Britain\", \"Barbados\", \"Norway\", \"Japan\",\n  \"New Zealand\", \"Singapore\"\n  )  Now we need to pick out the data for these countries from  econ .\nThe operator  %in%  can be used to match entries in  econ$Country  that appear in the  target_countries  list we just made.\nWe can combine this with the  subset  function to get the data we want:  >labeled_countries <- subset(econ, Country %in% target_countries)  This graph has a lot of closely packed datapoints and we don't want our labels to overlap.\nThis means we need a non-standard text labelling  geom .\nLoad the  ggrepel  library to add this to our environment.  library(ggrepel)  The  geom  we want is  geom_text_repel .\nAs we only want to label the countries in  labeled_countries  we need to set the  data  option for this  geom , rather than using the default inhereted from  ggplot  (in this case  econ ).\nTry creating teh labelled graph using:  >ggplot(econ, aes(x = CPI, y = HDI)) + \n  geom_point(aes(color = Region), shape = 1, stroke = 1, size = 2.5) +\n  geom_text_repel(aes(label = Country), data = labeled_countries, force = 10) +\n  stat_smooth(method = \"lm\", formula = y ~ log(x), se = FALSE, color = \"red\", size = 0.5)",
            "title": "Labelling datapoints"
        },
        {
            "location": "/advanced_graphing_ii/#polishing-the-appearance",
            "text": "Now all we need to do is improve the aesthetics of our graph.\nIn this step we will combine a few tweaks; Adjusting and labelling the the x and y scales and improving the colour scheme used.  So far, we have accepted the default colouring of the points.\nAn excellent resource for palettes which add clarity to your graphics is  Color Brewer .\nFortunately, many of their colour schemes are built into the packages we have loaded, here we will chose the  Paired  palette.  An improved plot can be produced using the command below. Can you identify the additions which alter each element of the graph?  >ggplot(econ, aes(x = CPI, y = HDI)) + \n  geom_point(aes(color = Region), shape = 1, stroke = 1, size = 2.5) +\n  geom_text_repel(aes(label = Country), data = labeled_countries, force = 10, color = \"gray20\") +\n  stat_smooth(method = \"lm\", formula = y ~ log(x), se = FALSE, color = \"red\", size = 0.5) +\n  scale_x_continuous(name = \"Corruption Perceptions Index, 2011 (10=least corrupt)\",\n  limits = c(.9, 10.5),\n  breaks = 1:10) +\n  scale_y_continuous(name = \"Human Development Index, 2011 (1=Best)\",\n  limits = c(0.2, 1.0),\n  breaks = seq(0.2, 1.0, by = 0.1)) +\n  scale_colour_brewer(palette=\"Paired\", direction = 1)    In  ggplot2  nearly all aspects of the appearance of your graph can be edited.\nMany of the standard things you want to edit (font size, background colour, etc.) are grouped together as part of what is called the  theme .\nLook at the help using  ?theme  to see all of the elements of teh plot you can change.\nA theme is added to a  ggplot  object in the same way as elements such as  geoms .  Thankfully, we don't have to edit each element individually.\nThere are pre-selected themes available. \nHere we use the  theme_minimal  selections and then customize it further.\nWe add a horizontal grid in line with the y axis tic marks and move the legend to the top of the plot.  >ggplot(econ, aes(x = CPI, y = HDI)) + \n  geom_point(aes(color = Region), shape = 1, stroke = 1, size = 2.5) +\n  geom_text_repel(aes(label = Country), data = labeled_countries, force = 10, color = \"gray20\") +\n  stat_smooth(method = \"lm\", formula = y ~ log(x), se = FALSE, color = \"red\", size = 0.5) +\n  scale_x_continuous(name = \"Corruption Perceptions Index, 2011 (10=least corrupt)\",\n  limits = c(.9, 10.5),\n  breaks = 1:10) +\n  scale_y_continuous(name = \"Human Development Index, 2011 (1=Best)\",\n  limits = c(0.2, 1.0),\n  breaks = seq(0.2, 1.0, by = 0.1)) +\n  scale_colour_brewer(palette=\"Paired\", direction = 1) +\n  theme_minimal() +\n  theme(\n    legend.position = c(\"top\"),\n    legend.direction = \"horizontal\",\n    panel.grid.major = element_line(color = \"gray50\", size = 0.5),\n    panel.grid.minor = element_blank(),\n    panel.grid.major.x = element_blank()\n  )   This is the end of the tutorial.\nYou now have a rather lovely looking plot and a good approximation of the Economist plot.\nYou should play with all of the options that have been introduced to you and see if you can improve the likeness (for example adding a title).",
            "title": "Polishing the appearance"
        }
    ]
}